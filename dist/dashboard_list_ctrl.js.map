{"version":3,"sources":["../src/dashboard_list_ctrl.js"],"names":["_","PanelCtrl","DashboardListCtrl","$scope","$injector","$location","backendSrv","navigate","bind","switchOrganisation","dashboardList","organisationList","windowLocation","currentDashboard","window","location","pathname","split","pop","loadDashboardList","loadOrganisations","$on","search","target","parent","href","then","result","map","item","url","uri","name","title","notifyContainerWindow","get","id","orgId","dashlist","obj","find","push","obj2","messageObj","dashboard","breadcrumb","top","postMessage","path","post","templateUrl"],"mappings":"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","file":"dashboard_list_ctrl.js","sourcesContent":["/// <reference path=\"../typings/common.d.ts\" />\n/// <reference path=\"../typings/index.d.ts\" />\nimport _ from \"lodash\";\nimport { PanelCtrl } from \"app/plugins/sdk\";\nimport \"./dashboard_list.css!\";\nclass DashboardListCtrl extends PanelCtrl {\n    /**\n     * DashboardList class constructor\n     * @param {IDashboardListScope} $scope Angular scope\n     * @param {ng.auto.IInjectorService} $injector Angluar injector service\n     * @param {ng.ILocationService} $location Angular location service\n     * @param {any} backendSrv Grafana backend callback\n     */\n    constructor($scope, $injector, $location, backendSrv) {\n        super($scope, $injector);\n        // Init variables\n        $scope.navigate = this.navigate.bind(this);\n        $scope.switchOrganisation = this.switchOrganisation.bind(this);\n        this.backendSrv = backendSrv;\n        this.dashboardList = [];\n        this.organisationList = [];\n        this.windowLocation = $location;\n        this.currentDashboard = window.location.pathname.split(\"/\").pop();\n        // Load list of dashboards\n        this.loadDashboardList();\n        // Load organizations for current user\n        this.loadOrganisations();\n        // Adding a mechanism for telling parent frame to navigate to new url\n        // Add listener for route changes: If route has target-parameter then\n        // tell parent window to navigate to given target\n        // e.g. setting following url-link in some Grafana dashboard: ?target=/logs\n        $scope.$on(\"$routeUpdate\", () => {\n            if ($location.search().target) {\n                window.parent.location.href = $location.search().target;\n            }\n        });\n    }\n    /**\n     * Load dashboard items\n     */\n    loadDashboardList() {\n        // Fetch list of all dashboards from Grafana\n        this.backendSrv.search({}).then((result) => {\n            this.dashboardList = result.map((item) => {\n                return {\n                    url: \"dashboard/\" + item.uri,\n                    name: item.title\n                };\n            });\n            this.notifyContainerWindow();\n        });\n    }\n    /**\n     * Load dashboard items\n     */\n    loadOrganisations() {\n        // Fetch list of organisations of current user from Grafana\n        this.backendSrv.get(\"api/user/orgs\").then((result) => {\n            this.organisationList = result.map((item) => {\n                return {\n                    id: item.orgId,\n                    name: item.name\n                };\n            });\n        });\n    }\n    /**\n     * Notify container window\n     * @param {string} url optional\n     */\n    notifyContainerWindow(url) {\n        // Parse breadcrumb\n        let dashlist = [];\n        let uri = \"dashboard/db/\" + this.currentDashboard;\n        let obj = _.find(this.dashboardList, { url: uri });\n        dashlist.push({\n            url: uri,\n            name: obj.name\n        });\n        if (url) {\n            let obj2 = _.find(this.dashboardList, { url: url });\n            dashlist.push({\n                url: url,\n                name: obj2.name\n            });\n        }\n        // Send message to uppper window\n        const messageObj = {\n            dashboard: window.location.pathname.split(\"/\").pop(),\n            breadcrumb: dashlist\n        };\n        window.top.postMessage(messageObj, \"*\");\n    }\n    /**\n     * Navigate to given dashboard\n     * @param {string} url\n     */\n    navigate(url) {\n        this.windowLocation.path(url);\n        this.notifyContainerWindow(url);\n    }\n    /**\n     * Switch organisation of current user\n     * @param {number} id\n     */\n    switchOrganisation(id) {\n        this.backendSrv.post(\"api/user/using/\" + id).then((result) => {\n            this.loadDashboardList();\n        });\n    }\n}\nDashboardListCtrl.templateUrl = \"module.html\";\nexport { DashboardListCtrl, DashboardListCtrl as PanelCtrl };\n//# sourceMappingURL=dashboard_list_ctrl.js.map"]}